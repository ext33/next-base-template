{
  "compilerOptions": {
    /* ----- Basic Options ----- */
    "allowJs": true, // Allow javascript files to be compiled.
    "isolatedModules": true, /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    "jsx": "preserve", /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    "lib": [ // Specify library files to be included in the compilation.
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "module": "ESNEXT", // Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'.
    "noEmit": true, /* Do not emit outputs. */
    "noEmitOnError": true, /* Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported. */
    "outDir": "./build", /* Redirect output structure to the directory. */
    "rootDir": "." /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,
    "sourceMap": true, /* Generates corresponding '.map' file. */
    "target": "ESNEXT", // Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'.
    // "checkJs": true,                       // Report errors in .js files.
    // "composite": true,                     /* Enable project compilation */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "incremental": true,                   /* Enable incremental compilation */
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    // "removeComments": true,                /* Do not emit comments to output. */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    "types": [
      "node"
    ],
    /* ----- Strict Type-Checking Options ----- */
    "strict": true, /* Enable all strict type-checking options. *///    "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    //    "strictNullChecks": true,              /* Enable strict null checks. */
    //    "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    //    "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    //    "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    //    "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    //    "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */
    /* ----- Additional Checks ----- */
    "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statement. *///    "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    //    "noUncheckedIndexedAccess": true,      /* Include 'undefined' in home signature results */
    //    "noUnusedLocals": true,                /* Report errors on unused locals. */
    //    "noUnusedParameters": true,            /* Report errors on unused parameters. */
    /* ----- Module Resolution Options ----- */
    "allowSyntheticDefaultImports": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,
    "baseUrl": "./src/", // Base directory to resolve non-absolute module names.
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    "moduleResolution": "node" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,
    "resolveJsonModule": true,
    "typeRoots": [
      "node_modules/@types"
    ], // List of folders to include type definitions from.
    // "allowUmdGlobalAccess": true,         /* Allow accessing UMD globals from modules. */
    // "preserveSymlinks": true,             /* Do not resolve the real path of symlinks. */
    // "rootDirs": [],                       /* List of root folders whose combined content represents the structure of the project at runtime. */
    /* ----- Aliases ----- */
    "paths": { // A series of entries which re-map imports to lookup locations relative to the 'baseUrl'.
      "@public": [
        "../public"
      ],
      "public": [
        "../public"
      ],
      "@node_nodules": [
        "../node_nodules"
      ],
      "fonts": [
        "../public/fonts"
      ],
      "src": [
        "./"
      ],
      "api": [
        "api"
      ],
      "components": [
        "components"
      ],
      "config": [
        "config"
      ],
      "constants": [
        "constants"
      ],
      "contexts": [
        "contexts"
      ],
      "assets": [
        "assets"
      ],
      "files": [
        "files"
      ],
      "docs": [
        "docs"
      ],
      "fetchHooks": [
        "fetchHooks"
      ],
      "helpers": [
        "helpers"
      ],
      "hooks": [
        "hooks"
      ],
      "images": [
        "images"
      ],
      "interceptors": [
        "interceptors"
      ],
      "locales": [
        "locales"
      ],
      "pages": [
        "pages"
      ],
      "router": [
        "router"
      ],
      "services": [
        "services"
      ],
      "store": [
        "store"
      ],
      "styled": [
        "styled"
      ],
      "styles": [
        "styles"
      ],
      "theme": [
        "theme"
      ],
      "types": [
        "types"
      ],
      "utils": [
        "utils"
      ]
    },
    /* ----- Source Map Options ----- */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */
    /* ----- Experimental Options ----- */
    "experimentalDecorators": true, /* Enables experimental support for ES7 decorators. */// "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
    /* ----- Advanced Options ----- */
    "skipLibCheck": true, /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */,
    "incremental": true
  },
  "include": [
    "next-env.d.ts",
    "**/*.js",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules",
    "./node_modules",
    "./build",
    "./__old",
    "./temp",
    "./.next",
    "**/node_modules",
    "**/fixture",
    "**/.nyc_output",
    "**/coverage",
    "**/dist",
    "**/dist-dev",
    "**/build",
    "**/package-lock.json"
  ]
}
